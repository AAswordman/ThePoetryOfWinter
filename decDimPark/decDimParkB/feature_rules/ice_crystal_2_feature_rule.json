{
    "format_version": "1.13.0",
    "minecraft:feature_rules": {
        "description": {
            "identifier": "dec:ice_crystal_2_feature_rule",
            "places_feature": "dec:ice_crystal_2_mcstructure"
        },
        "conditions": {
            "placement_pass": "surface_pass",
            "minecraft:biome_filter": [
                {
                    "all_of": [
                        {
                            "test": "has_biome_tag",
                            "operator": "!=",
                            "value": "river"
                        },
                        {
                            "any_of": [
                                {
                                    "test": "has_biome_tag",
                                    "operator": "==",
                                    "value": "frozen"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "distribution": {
            "iterations": 1,
            "scatter_chance": "v.distance = 512;v.x2 = math.floor((variable.originx)/v.distance)*v.distance;v.z2 = math.floor((variable.originz)/v.distance)*v.distance;v.c1 = math.round(10000*math.abs(query.noise((v.x2+64) / 200.0, (v.x2+64) / 200.0)));v.c2 = math.round(10000*math.abs(query.noise((v.x2+128)  / 200.0, (v.z2+128) / 200.0)));v.r1 = math.mod((v.c1 * 9301 + 49297),233280) / 233280.0;v.r2 = math.mod((v.c2 * 9301 + 49297),233280) / 233280.0;v.x1 = v.x2 + math.round(v.r1*(v.distance/16/2))*16 + v.distance/4;v.z1 = v.z2 + math.round(v.r2*(v.distance/16/2))*16 + v.distance/4;v.len = math.sqrt(math.pow(variable.originx-v.x1,2)+math.pow(variable.originz-v.z1,2));return v.len > 50 && v.len <= 96 ?  (100 - v.len*100/96)/5 : 0;",
            /*
            v.distance = 576;
            v.range = 96;
            v.x2 = math.floor((variable.originx)/v.distance)*v.distance;
            v.z2 = math.floor((variable.originz)/v.distance)*v.distance;
            v.c1 = math.round(10000*math.abs(query.noise((v.x2+64) / 200.0, (v.x2+64) / 200.0)));
            v.c2 = math.round(10000*math.abs(query.noise((v.x2+128)  / 200.0, (v.z2+128) / 200.0)));
            v.r1 = math.mod((v.c1 * 9301 + 49297),233280) / 233280.0;
            v.r2 = math.mod((v.c2 * 9301 + 49297),233280) / 233280.0;
            v.x1 = v.x2 + math.round(v.r1*(v.distance/16/2))*16 + v.distance/4;
            v.z1 = v.z2 + math.round(v.r2*(v.distance/16/2))*16 + v.distance/4;
            v.len = math.sqrt(math.pow(variable.originx-v.x1,2)+math.pow(variable.originz-v.z1,2));
            return v.len <= v.range ?  100 - v.len*100/v.range : 0;
            */
            "coordinate_eval_order": "zxy",
            "x": {
                "distribution": "uniform",
                "extent": [
                    0,
                    16
                ]
            },
            "y": {
                "distribution": "uniform",
                "extent": [
                    "query.heightmap(variable.worldx, variable.worldz) + 20",
                    "query.heightmap(variable.worldx, variable.worldz) + 120"

                ]
            },
            "z": {
                "distribution": "uniform",
                "extent": [
                    0,
                    16
                ]
            }
        }
    }
}